[{"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\index.js":"1","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\App\\index.js":"2","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\Home\\index.js":"3","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\StudentList\\index.js":"4","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\Navbar\\index.js":"5","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\StudentRegistration\\index.js":"6","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\NotFound\\index.js":"7","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\config\\index.js":"8","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\StudentProfile\\index.js":"9","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\Loading\\index.js":"10","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\Table\\index.js":"11","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\ColumnFilter\\index.js":"12","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\MyTextField\\index.js":"13","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\utils\\index.js":"14"},{"size":208,"mtime":1606174117383,"results":"15","hashOfConfig":"16"},{"size":2182,"mtime":1606178406151,"results":"17","hashOfConfig":"16"},{"size":779,"mtime":1606185908781,"results":"18","hashOfConfig":"16"},{"size":2799,"mtime":1606183872914,"results":"19","hashOfConfig":"16"},{"size":3285,"mtime":1606181022922,"results":"20","hashOfConfig":"16"},{"size":6895,"mtime":1606184043109,"results":"21","hashOfConfig":"16"},{"size":179,"mtime":1606175715514,"results":"22","hashOfConfig":"16"},{"size":1469,"mtime":1606176500778,"results":"23","hashOfConfig":"16"},{"size":2350,"mtime":1606182143394,"results":"24","hashOfConfig":"16"},{"size":499,"mtime":1606177091127,"results":"25","hashOfConfig":"16"},{"size":3855,"mtime":1606183755893,"results":"26","hashOfConfig":"16"},{"size":513,"mtime":1606178072095,"results":"27","hashOfConfig":"16"},{"size":1014,"mtime":1606178691664,"results":"28","hashOfConfig":"16"},{"size":596,"mtime":1606179080575,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l60pb",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\App\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\StudentList\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\Navbar\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\StudentRegistration\\index.js",["60","61"],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\NotFound\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\config\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\pages\\StudentProfile\\index.js",["62"],"import { Box, Button, Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { API_ENDPOINTS } from \"../../config\";\r\nimport Loading from \"../../components/Loading\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst StudentProfile = () => {\r\n  const studentId = useParams(\"id\").id;\r\n  const history = useHistory();\r\n\r\n  const [data, setData] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${API_ENDPOINTS.base}/employees/${studentId}`)\r\n      .then((data) => {\r\n        setData(data.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) return <Loading />;\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        <Box my={5} maxWidth={600}>\r\n          <Paper elevation={5}>\r\n            <Box padding={5}>\r\n              <Box mb={5}>\r\n                <Typography align=\"center\" variant=\"h3\">\r\n                  Student Profile\r\n                </Typography>\r\n              </Box>\r\n              <Grid container spacing={2}>\r\n                <Grid xs={12} item>\r\n                  <Typography variant=\"h5\">First name: {data.firstName}</Typography>\r\n                </Grid>\r\n                <Grid xs={12} item>\r\n                  <Typography variant=\"h5\">Last name: {data.lastName}</Typography>\r\n                </Grid>\r\n                <Grid xs={12} item>\r\n                  <Typography variant=\"h5\">Email: {data.emailId}</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Box display=\"flex\" justifyContent=\"flex-end\" mt={5}>\r\n                    <Button\r\n                      onClick={() => history.push(`/student/edit/${studentId}`)}\r\n                      color=\"secondary\"\r\n                      variant=\"contained\"\r\n                      startIcon={<EditIcon />}\r\n                    >\r\n                      EDIT\r\n                    </Button>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StudentProfile;\r\n","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\Loading\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\Table\\index.js",["63","64"],"import React, { useMemo } from \"react\";\r\nimport { useTable, useSortBy, useGlobalFilter, useFilters } from \"react-table\";\r\nimport { matchSorter } from \"match-sorter\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport { blue, grey } from \"@material-ui/core/colors\";\r\nimport { Box, TableSortLabel, Typography } from \"@material-ui/core\";\r\nimport ColumnFilter from \"../ColumnFilter\";\r\n\r\nconst MyTable = (props) => {\r\n  const { columns, data } = props;\r\n\r\n  const _columns = useMemo(() => columns, [columns]);\r\n  const _data = useMemo(() => data, [data]);\r\n\r\n  function fuzzyTextFilterFn(rows, id, filterValue) {\r\n    return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n  }\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      Filter: ColumnFilter,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const filterTypes = React.useMemo(() => ({ fuzzyText: fuzzyTextFilterFn }), []);\r\n\r\n  const tableInstance = useTable(\r\n    { columns: _columns, data: _data, defaultColumn, filterTypes },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useSortBy\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, state, setGlobalFilter } = tableInstance;\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n      \"& th\": {\r\n        fontWeight: 700,\r\n        backgroundColor: `${grey[200]}`,\r\n        borderRight: `1px solid ${grey[300]}`,\r\n        borderLeft: `1px solid ${grey[300]}`,\r\n        paddingRight: \"4px\",\r\n        paddingLeft: \"4px\",\r\n        \"& p\": {\r\n          fontWeight: \"600\",\r\n        },\r\n      },\r\n      \"& tbody\": {\r\n        \"& tr:hover\": {\r\n          backgroundColor: `${blue[100]}`,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <TableContainer variant={\"outlined\"} component={Paper}>\r\n        <Table className={classes.table} size=\"small\" aria-label=\"clients table\" stickyHeader {...getTableProps()}>\r\n          <TableHead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((col) => (\r\n                  <TableCell component=\"th\" {...col.getHeaderProps()}>\r\n                    <Typography {...col.getSortByToggleProps()}>\r\n                      {col.render(\"Header\")}\r\n                      {col.isSorted ? (\r\n                        <TableSortLabel\r\n                          active={col.isSorted}\r\n                          // react-table has a unsorted state which is not treated here\r\n                          direction={col.isSortedDesc ? \"desc\" : \"asc\"}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </Typography>\r\n                    <Box>{col.canFilter ? col.render(\"Filter\") : null}</Box>\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHead>\r\n\r\n          <TableBody {...getTableBodyProps()}>\r\n            {rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <TableRow {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return <TableCell {...cell.getCellProps()}>{cell.render(\"Cell\")}</TableCell>;\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyTable;\r\n","C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\ColumnFilter\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\components\\MyTextField\\index.js",[],"C:\\Users\\Alec\\Documents\\repos\\React-Spring-CRUD\\client\\src\\utils\\index.js",[],{"ruleId":"65","severity":1,"message":"66","line":53,"column":6,"nodeType":"67","endLine":53,"endColumn":8,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":87,"column":32,"nodeType":"70","endLine":87,"endColumn":45},{"ruleId":"65","severity":1,"message":"71","line":27,"column":6,"nodeType":"67","endLine":27,"endColumn":8,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":44,"column":77,"nodeType":"75","messageId":"76","endLine":44,"endColumn":82},{"ruleId":"73","severity":1,"message":"77","line":44,"column":84,"nodeType":"75","messageId":"76","endLine":44,"endColumn":99},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAddMode' and 'studentId'. Either include them or remove the dependency array.","ArrayExpression",["78"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","React Hook useEffect has a missing dependency: 'studentId'. Either include it or remove the dependency array.",["79"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'setGlobalFilter' is assigned a value but never used.",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [isAddMode, studentId]",{"range":"84","text":"85"},"Update the dependencies array to be: [studentId]",{"range":"86","text":"87"},[1821,1823],"[isAddMode, studentId]",[840,842],"[studentId]"]